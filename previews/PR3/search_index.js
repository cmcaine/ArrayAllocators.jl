var documenterSearchIndex = {"docs":
[{"location":"bytecalculators/","page":"Byte Calculators","title":"Byte Calculators","text":"CurrentModule = ArrayAllocators.ByteCalculators","category":"page"},{"location":"bytecalculators/#ByteCalculators","page":"Byte Calculators","title":"ByteCalculators","text":"","category":"section"},{"location":"bytecalculators/","page":"Byte Calculators","title":"Byte Calculators","text":"Byte calculators perform the task of computing the total number of bytes to calculate. In doing so, they try to detect integer overflow conditions.","category":"page"},{"location":"bytecalculators/#Example","page":"Byte Calculators","title":"Example","text":"","category":"section"},{"location":"bytecalculators/","page":"Byte Calculators","title":"Byte Calculators","text":"julia> using ArrayAllocators, ArrayAllocators.ByteCalculators\n\njulia> bc = ArrayAllocators.DefaultByteCalculator{UInt16}(typemax(Int))\nCheckedMulByteCalculator{UInt16}((9223372036854775807,))\n\njulia> length(bc)\n9223372036854775807\n\njulia> nbytes(bc)\nERROR: OverflowError: The product of array length and element size will cause an overflow.\nStacktrace:\n[...]","category":"page"},{"location":"bytecalculators/#Default-Byte-Calculator","page":"Byte Calculators","title":"Default Byte Calculator","text":"","category":"section"},{"location":"bytecalculators/","page":"Byte Calculators","title":"Byte Calculators","text":"CheckedMulByteCalculator","category":"page"},{"location":"bytecalculators/#ArrayAllocators.ByteCalculators.CheckedMulByteCalculator","page":"Byte Calculators","title":"ArrayAllocators.ByteCalculators.CheckedMulByteCalculator","text":"CheckedMulByteCalculator\n\nCalculate the number of bytes by using Base.checked_mul to check if the product of the dimensions (length) or the product of the length and the element size will cause an integer overflow.\n\n\n\n\n\n","category":"type"},{"location":"bytecalculators/#Alternative-Byte-Calculators","page":"Byte Calculators","title":"Alternative Byte Calculators","text":"","category":"section"},{"location":"bytecalculators/","page":"Byte Calculators","title":"Byte Calculators","text":"WideningByteCalculator\nUnsafeByteCalculator","category":"page"},{"location":"bytecalculators/#ArrayAllocators.ByteCalculators.WideningByteCalculator","page":"Byte Calculators","title":"ArrayAllocators.ByteCalculators.WideningByteCalculator","text":"WideningByteCalculator\n\nWidens eltype(Dims), Int in order to catch integer overflow.\n\n\n\n\n\n","category":"type"},{"location":"bytecalculators/#ArrayAllocators.ByteCalculators.UnsafeByteCalculator","page":"Byte Calculators","title":"ArrayAllocators.ByteCalculators.UnsafeByteCalculator","text":"UnsafeByteCalculator\n\nCalculate number of bytes to allocate for an array without any integer overflow checking.\n\n\n\n\n\n","category":"type"},{"location":"bytecalculators/","page":"Byte Calculators","title":"Byte Calculators","text":"CurrentModule = SafeByteCalculators","category":"page"},{"location":"bytecalculators/","page":"Byte Calculators","title":"Byte Calculators","text":"SafeByteCalculators.SafeByteCalculator","category":"page"},{"location":"bytecalculators/#SafeByteCalculators.SafeByteCalculator","page":"Byte Calculators","title":"SafeByteCalculators.SafeByteCalculator","text":"SafeByteCalculator\n\nUse SafeInt from SaferIntegers.jl to calculate the number of bytes to allocate for an Array.\n\n\n\n\n\n","category":"type"},{"location":"bytecalculators/","page":"Byte Calculators","title":"Byte Calculators","text":"CurrentModule = ArrayAllocators.ByteCalculators","category":"page"},{"location":"bytecalculators/#Abstract-Type","page":"Byte Calculators","title":"Abstract Type","text":"","category":"section"},{"location":"bytecalculators/","page":"Byte Calculators","title":"Byte Calculators","text":"AbstractByteCalculator","category":"page"},{"location":"bytecalculators/#ArrayAllocators.ByteCalculators.AbstractByteCalculator","page":"Byte Calculators","title":"ArrayAllocators.ByteCalculators.AbstractByteCalculator","text":"AbstractByteCalculator\n\nParent abstract type for byte calculators, which calculate the total number of bytes of memory to allocate.\n\n\n\n\n\n","category":"type"},{"location":"numa/","page":"NUMA Array Allocators","title":"NUMA Array Allocators","text":"CurrentModule = NumaAllocators","category":"page"},{"location":"numa/#NumaAllocators","page":"NUMA Array Allocators","title":"NumaAllocators","text":"","category":"section"},{"location":"numa/","page":"NUMA Array Allocators","title":"NUMA Array Allocators","text":"Non-Uniform Memory Access (NUMA) array allocators allow you to allocate memory on specific NUMA nodes.","category":"page"},{"location":"numa/#Basic-Usage","page":"NUMA Array Allocators","title":"Basic Usage","text":"","category":"section"},{"location":"numa/","page":"NUMA Array Allocators","title":"NUMA Array Allocators","text":"A NumaAllocator can be instantiated via numa(node) and passed to the Array constructor as below.","category":"page"},{"location":"numa/","page":"NUMA Array Allocators","title":"NUMA Array Allocators","text":"julia> using NumaAllocators\n\njulia> a0 = Array{Int8}(numa(0), 1024, 1024);\n\njulia> b0 = Array{Int8}(numa(0), 1024, 1024);\n\njulia> a1 = Array{Int8}(numa(1), 1024, 1024);\n\njulia> b1 = Array{Int8}(numa(1), 1024, 1024);","category":"page"},{"location":"numa/","page":"NUMA Array Allocators","title":"NUMA Array Allocators","text":"Depending on your processor architecture, some operations may be between NUMA nodes may be faster than others.","category":"page"},{"location":"numa/","page":"NUMA Array Allocators","title":"NUMA Array Allocators","text":"julia> @time fill!(a0, 1);\n  0.000374 seconds\n\njulia> @time fill!(b0, 2);\n  0.000307 seconds\n\njulia> @time fill!(a1, 3);\n  0.000418 seconds\n\njulia> @time fill!(b1, 4);\n  0.000383 seconds\n\njulia> @time copyto!(b0, a0);\n  0.000439 seconds\n\njulia> @time copyto!(b1, a0);\n  0.000287 seconds\n\njulia> @time copyto!(b1, a1);\n  0.000376 seconds\n\njulia> @time copyto!(b0, a1);\n  0.000455 seconds\n\njulia> versioninfo()\nJulia Version 1.7.2\nCommit bf53498635 (2022-02-06 15:21 UTC)\nPlatform Info:\n  OS: Windows (x86_64-w64-mingw32)\n  CPU: Intel(R) Xeon(R) Gold 5220R CPU @ 2.20GHz\n  WORD_SIZE: 64\n  LIBM: libopenlibm\n  LLVM: libLLVM-12.0.1 (ORCJIT, cascadelake)\n","category":"page"},{"location":"numa/","page":"NUMA Array Allocators","title":"NUMA Array Allocators","text":"In the example above, copying 1 MB of data from NUMA node 0 to NUMA node 1 is faster than copying between memory local to either NUMA node or copying data from NUMA node 1 to NUMA node 0.","category":"page"},{"location":"numa/#Interface","page":"NUMA Array Allocators","title":"Interface","text":"","category":"section"},{"location":"numa/","page":"NUMA Array Allocators","title":"NUMA Array Allocators","text":"numa\nNumaAllocator","category":"page"},{"location":"numa/#NumaAllocators.numa","page":"NUMA Array Allocators","title":"NumaAllocators.numa","text":"numa(node)\n\nCreate a NumaAllocator on NUMA node node. Short hand for NumaAllocator constructor.\n\nExample\n\njulia> using NumaAllocators\n\njulia> Array{UInt8}(numa(0), 32, 32);\n\n\n\n\n\n","category":"function"},{"location":"numa/#NumaAllocators.NumaAllocator","page":"NUMA Array Allocators","title":"NumaAllocators.NumaAllocator","text":"NumaAllocator(node)\n\nCross-platform NUMA allocator\n\nExample\n\njulia> using NumaAllocators\n\njulia> Array{UInt8}(NumaAllocator(0), 32, 32);\n\n\n\n\n\n","category":"type"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = ArrayAllocators","category":"page"},{"location":"#ArrayAllocators","page":"Home","title":"ArrayAllocators","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for ArrayAllocators.","category":"page"},{"location":"#Introduction","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This Julia package provides mechanisms to allocate arrays beyond that provided in the Base module of Julia.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The instances of the sub types of AbstractArrayAllocator take the place of undef in the Array{T}(undef, dims) invocation. This allows us to take advantage of alternative ways of allocating memory. The allocators take advantage of Base.unsafe_wrap in order to create arrays from pointers. A finalizer is also added for allocators that do not use Libc.free.","category":"page"},{"location":"","page":"Home","title":"Home","text":"In the base ArrayAllocators package, the following allocators are provided.","category":"page"},{"location":"","page":"Home","title":"Home","text":"calloc\nmalloc\nMemAlign(alignment)","category":"page"},{"location":"","page":"Home","title":"Home","text":"An extension for use with Non-Uniform Memory Access allocations is available via the subpackage NumaAllocators.jl.","category":"page"},{"location":"#Example-Basic-Usage","page":"Home","title":"Example Basic Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Each of the methods below allocate 1 MiB of memory. Using undef as the first argument allocate uninitialized memory. The values are not guaranteed to be 0 or any other value.","category":"page"},{"location":"","page":"Home","title":"Home","text":"In Base, the method zeros can be used to explicitly fill the memory with zeros. This is equivalent to using fill!(..., 0). Using calloc guarantees the values will be 0, yet is often as fast as using undef initialization.","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using ArrayAllocators\n\njulia> @time U = Array{Int8}(undef, 1024, 1024);\n  0.000019 seconds (2 allocations: 1.000 MiB)\n\njulia> @time Z1 = zeros(Int8, 1024, 1024);\n  0.000327 seconds (2 allocations: 1.000 MiB)\n\njulia> @time Z2 = fill!(Array{UInt8}(undef, 1024, 1024), 0);\n  0.000301 seconds (2 allocations: 1.000 MiB)\n\njulia> @time C = Array{Int8}(calloc, 1024, 1024);\n  0.000020 seconds (4 allocations: 1.000 MiB)\n\njulia> sum(C)\n0","category":"page"},{"location":"#Caveats","page":"Home","title":"Caveats","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Above calloc appears to be much faster than zeros at generating an array full of 0s. However, some of the array created with zeros has already been fully allocated. The array allocated with calloc take longer to initialize since the operating system may have deferred the actual allocation of memory.","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> @time Z = zeros(Int8, 1024, 1024);\n  0.000324 seconds (2 allocations: 1.000 MiB)\n\njulia> @time fill!(Z, 1);\n  0.000138 seconds\n\njulia> @time fill!(Z, 2);\n  0.000136 seconds\n\njulia> @time U = Array{Int8}(calloc, 1024, 1024);\n  0.000020 seconds (4 allocations: 1.000 MiB)\n\njulia> @time fill!(U, 1);\n  0.000349 seconds\n\njulia> @time fill!(U, 2);\n  0.000136 seconds","category":"page"},{"location":"#Allocators","page":"Home","title":"Allocators","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"calloc\nmalloc","category":"page"},{"location":"#ArrayAllocators.calloc","page":"Home","title":"ArrayAllocators.calloc","text":"calloc\n\nCallocAllocator singleton instance. calloc will allocate memory and guarantee initialization to 0. See the type for details and the C standard library function for further details.\n\nExample\n\njulia> A = Array{UInt8}(calloc, 16, 16);\n\njulia> sum(A)\n0x0000000000000000\n\n\n\n\n\n","category":"constant"},{"location":"#ArrayAllocators.malloc","page":"Home","title":"ArrayAllocators.malloc","text":"malloc\n\nMallocAllocator singleton instance. malloc will only allocate memory. It does not initialize memory is is similar in use as undef. See the type and the C standard library function for details.\n\nExample\n\njulia> Array{UInt8}(malloc, 16, 16);\n\n\n\n\n\n\n","category":"constant"},{"location":"#Aligned-Memory","page":"Home","title":"Aligned Memory","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"MemAlign\nalignment\nmin_alignment","category":"page"},{"location":"#ArrayAllocators.MemAlign","page":"Home","title":"ArrayAllocators.MemAlign","text":"MemAlign([alignment::Integer])\n\nAllocate aligned memory. Alias for platform specific implementations.\n\nalignment must be a power of 2.\n\nOn POSIX systems, alignment must be a multiple of sizeof(Ptr). On Windows, alignment must be a multiple of 2^16.\n\nIf alignment is not specified, it will be set to min_alignment(MemAlign).\n\nMemAlign is a constant alias for one the following platform specific implementations.\n\nPOSIX (Linux and macOS): POSIX.PosixMemAlign\nWindows: Windows.WinMemAlign.\n\n\n\n\n\n","category":"type"},{"location":"#ArrayAllocators.alignment","page":"Home","title":"ArrayAllocators.alignment","text":"alignment(alloc::AbstractMemAlign)\n\nGet byte alignment of the AbstractMemAlign array allocator.\n\n\n\n\n\n","category":"function"},{"location":"#ArrayAllocators.min_alignment","page":"Home","title":"ArrayAllocators.min_alignment","text":"min_alignment(::AbstractMemAlign)\n\nGet the minimum byte alignment of the AbstractMemAlign array allocator.\n\n\n\n\n\n","category":"function"},{"location":"#Types","page":"Home","title":"Types","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"CallocAllocator\nMallocAllocator\nUndefAllocator","category":"page"},{"location":"#ArrayAllocators.CallocAllocator","page":"Home","title":"ArrayAllocators.CallocAllocator","text":"CallocAllocator()\n\nUse Libc.calloc to allocate an array. This is similar to zeros, except that the Libc implementation or the operating system may allocate and zero the memory in a lazy fashion.\n\nSee also https://en.cppreference.com/w/c/memory/calloc .\n\n\n\n\n\n","category":"type"},{"location":"#ArrayAllocators.MallocAllocator","page":"Home","title":"ArrayAllocators.MallocAllocator","text":"MallocAllocator()\n\nAllocate array using Libc.malloc. This is not meant to be useful but rather just to prototype the concept for a custom array allocator concept. This should be similar to using undef.\n\nSee also https://en.cppreference.com/w/c/memory/malloc .\n\n\n\n\n\n","category":"type"},{"location":"#ArrayAllocators.UndefAllocator","page":"Home","title":"ArrayAllocators.UndefAllocator","text":"UndefAllocator{B}\n\nAllocate arrays using the builtin undef method. The B parameter is a ByteCalculator\n\n\n\n\n\n","category":"type"},{"location":"#Internals","page":"Home","title":"Internals","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"AbstractArrayAllocator\nAbstractMemAlign\nwrap_libc_pointer","category":"page"},{"location":"#ArrayAllocators.AbstractArrayAllocator","page":"Home","title":"ArrayAllocators.AbstractArrayAllocator","text":"AbstractArrayAllocator{B}\n\nParent abstract type for array allocators. Parameter B is an AbstractByteCalculator Defines Array{T}(allocator, dims...) where T = Array{T}(allocator, dims)\n\n\n\n\n\n","category":"type"},{"location":"#ArrayAllocators.AbstractMemAlign","page":"Home","title":"ArrayAllocators.AbstractMemAlign","text":"AbstractMemAlign{B} <: AbstractArrayAllocator{B}\n\nAbstract supertype for aligned memory allocators.\n\n\n\n\n\n","category":"type"},{"location":"#ArrayAllocators.wrap_libc_pointer","page":"Home","title":"ArrayAllocators.wrap_libc_pointer","text":"wrap_libc_pointer(::Type{A}, ptr::Ptr{T}, dims) where {T, A <: AbstractArray{T}}\nwrap_libc_pointer(ptr::Ptr{T}, dims) where {T, A <: AbstractArray{T}}\n\nChecks to see if ptr is C_NULL for an OutOfMemoryError. Owns the array such that Libc.free is used.\n\n\n\n\n\n","category":"function"},{"location":"#Platform-Specific-Interface","page":"Home","title":"Platform Specific Interface","text":"","category":"section"},{"location":"#Windows","page":"Home","title":"Windows","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Windows.WinMemAlign","category":"page"},{"location":"#ArrayAllocators.Windows.WinMemAlign","page":"Home","title":"ArrayAllocators.Windows.WinMemAlign","text":"WinMemAlign([alignment, lowestStartingAddress, highestStartingAddress])\n\nUses VirtualAlloc2 to allocate aligned memory. alignment must be a power of 2 and larger than 65536.\n\n\n\n\n\n","category":"type"},{"location":"#POSIX","page":"Home","title":"POSIX","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"POSIX.PosixMemAlign","category":"page"},{"location":"#ArrayAllocators.POSIX.PosixMemAlign","page":"Home","title":"ArrayAllocators.POSIX.PosixMemAlign","text":"PosixMemAlign([alignment::Integer])\n\nUses posix_memalign to allocate aligned memory. alignment must be a power of 2 and larger than sizeof(Ptr).\n\nIf alignment is provided, it will be set to min_alignment(PosixMemAlign).\n\nExample\n\njulia> Array{UInt8}(PosixMemAlign(32), 16, 16);\n\n\n\n\n\n","category":"type"},{"location":"detailed_overview/#Detailed-Overview","page":"Detailed Overview","title":"Detailed Overview","text":"","category":"section"},{"location":"detailed_overview/","page":"Detailed Overview","title":"Detailed Overview","text":"The original inspiration for this package is the memory allocator calloc. calloc allocates the memory and guarantees that the memory will be initialized by zeros. By this definition, it would appear equivalent to Base.zeros. However, calloc is potentially able to take advantage of operating system facilities that allocate memory lazily on demand rather than eagerly. Additionally, it may be able to obtain memory from the operating system that has already been initialized by zeros due to security constraints. On many systems, this allocator returns as quickly as malloc, the allocator used by Array{T}(undef, dims). In particular, in Python, numpy.zeros uses calloc, which may at times appear faster than Base.zeros in Julia.","category":"page"},{"location":"detailed_overview/","page":"Detailed Overview","title":"Detailed Overview","text":"In contrast, Base.zeros allocates memory using malloc and then uses fill! to eagerly and explicitly fill the array with zeros. On some systems, this may be a redudnant operation since the operating system may already know the allocated memory is filled with zeros.","category":"page"},{"location":"detailed_overview/","page":"Detailed Overview","title":"Detailed Overview","text":"This package makes calloc and other allocators available. Some of these allocators are specific to particular kinds of systems.","category":"page"},{"location":"detailed_overview/","page":"Detailed Overview","title":"Detailed Overview","text":"One example is allocating on Non-Uniform Memory Access (NUMA) nodes. On a NUMA system, random-access memory (RAM) may be accessible by certain processor cores at lower latency and higher bandwidth than other cores. Thus, it makes sense to allocate memory on particular NUMA nodes. On Linux, this is facilitated by numactl software which includes libnuma. On Windows, NUMA-aware memory allocation is exposed via the Kernel32 memory application programming interface such as via the function VirtualAllocExNuma. This package provides an abstraction over the two libraries.","category":"page"},{"location":"detailed_overview/","page":"Detailed Overview","title":"Detailed Overview","text":"Another application is memory alignment which may facilitate the use of advanced vector instructions in modern processors.","category":"page"},{"location":"detailed_overview/","page":"Detailed Overview","title":"Detailed Overview","text":"One other feature of this package is implementation of \"Safe\" allocators. These allocators provide extra protection by detecting integer overflow situations. Integer overflow can occur when multiplying large numbers causing the result to potentially wrap around. Memory allocators may report success after allocating an wrapped around number of bytes. The \"Safe\" allocators use the SaferIntegers to detect integer overflow avoiding this erroneous situation.","category":"page"}]
}
